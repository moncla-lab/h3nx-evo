"""Here, define your wildcards. To include more subtypes or gene segments, simply
add those to these lists, separated by commas"""
SUBTYPES = ["h3nx"]
SEGMENTS = ["pb2","pb1","na","np","pa","ns","mp"]

rule all:
	input:
		treesort = expand("results/ha_treesort.tre", subtype=SUBTYPES, segment=SEGMENTS)

"""Specify all input files here.  """
rule files:
    params:
        aln = "data/alignments/{subtype}_{segment}.fasta",
        dates = "data/strain_dates.csv"

files = rules.files.params

rule tree:
    message: "Building tree"
    input:
        alignment = files.aln
    output:
        tree = "results/trees_unrooted/{subtype}_{segment}.nwk"
    params:
        method = "iqtree"
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --method {params.method} \
            --nthreads 1
        """
        
rule root:
    message: "Inferring root"
    input:
        tree = rules.tree.output.tree,
        alignment = files.aln,
        dates = files.dates
    output:
        tree = "results/trees_rooted/{subtype}_{segment}_rooted/rerooted.newick",
    shell:
    	"""
		treetime clock \
			--tree {input.tree} \
			--dates {input.dates} \
			--aln {input.alignment} \
			--outdir "results/trees_rooted/{wildcards.subtype}_{wildcards.segment}_rooted"
        """
        
rule descriptor:
	message: "creating a descriptor file that points to the tree and alignment paths"
	input:
		rooted = expand("results/trees_rooted/{subtype}_{segment}_rooted/rerooted.newick", subtype=SUBTYPES, segment=SEGMENTS)
	output:
		descriptor = "descriptor.csv" # WARNING: this has to be outputted to where treesort is being run or it throws errors
	shell:
		"""
		python scripts/descriptor.py \
		--descriptor {output.descriptor} 
		"""	
        
        
rule treesort:
    message: "running treesort to infer reassortment events"
    input:
    	descriptor = rules.descriptor.output.descriptor,
    output:
    	tree = "results/ha_treesort.tre"
    shell:
    	"""
		treesort \
		-i {input.descriptor} \
		-o {output.tree} \
		--no-collapse \
		> results/output.log
		"""	
		
rule summary:
	message: "converting to nwk, making a summary tree"
	input:
		tree = rules.treesort.output.tree
	output:
		json = "results/rea.json"
	shell:
		"""
		python scripts/summary.py \
		--tree {input.tree} \
		--outdir {output.json}
		"""
		

		
	